/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from 'react'
import { useGLTF, Text } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { A11y, useA11y, A11yTag } from '@react-three/a11y'
import * as THREE from "three";

const SmallOption = ({
  position,
  visible,
  nodes,
  color1,
  ...props
}) => {
  const a11y = useA11y()

  return (
    <>
      <mesh
        visible={visible}
        geometry={nodes.shape_plate_bevel_1003.geometry}
        material={nodes.shape_plate_bevel_1003.material}
        position={position}
        rotation={[-0.68, 0, Math.PI]}
      >
        <meshStandardMaterial
          roughness={0.2}
          metalness={0}
          flatShading={false}
          emissive={a11y.focus || a11y.hover ? '#0000ff' : color1}
          color={a11y.focus || a11y.hover ? '#0000ff' : color1}
        />
      </mesh>
    </>
  )
}

const MediumOption = ({
  position,
  visible,
  nodes,
  color1,
  ...props
}) => {
  const a11y = useA11y()

  return (
    <mesh
      visible={visible}
      geometry={nodes.shape_plate_bevel_2003.geometry}
      material={nodes.shape_plate_bevel_2003.material}
      rotation={[-0.68, 0, Math.PI]}
      position={position}
    >
      <meshStandardMaterial
        roughness={0.2}
        metalness={0}
        flatShading={false}
        emissive={a11y.focus || a11y.hover ? '#0000ff' : color1}
        color={a11y.focus || a11y.hover ? '#0000ff' : color1}
      />
    </mesh>
  )
}

const LargeOption = ({ position, visible, nodes, color1, ...props }) => {
  const a11y = useA11y()

  return (
    <mesh
      visible={visible}
      geometry={nodes.shape_plate_bevel_3003.geometry}
      material={nodes.shape_plate_bevel_3003.material}
      position={position}
      rotation={[-0.68, 0, Math.PI]}
    >
      <meshStandardMaterial
        roughness={0.2}
        metalness={0}
        flatShading={false}
        emissive={a11y.focus || a11y.hover ? '#0000ff' : color1}
        color={a11y.focus || a11y.hover ? '#0000ff' : color1}
      />
    </mesh>
  )
}

const LeftArrow = ({ position, nodes, color1, ...props }) => {
  const a11y = useA11y()

  return (
    <mesh
      geometry={nodes.shape_triangle_flat_2001.geometry}
      material={nodes.shape_triangle_flat_2001.material}
      position={position}
      rotation={[0, 1.54, -1.57]}
      scale={0.91}
    >
      <meshStandardMaterial
        roughness={0.2}
        metalness={1}
        flatShading={false}
        emissive={
          a11y.focus || a11y.hover
            ? '#0000ff'
            : a11y.focus || a11y.hover
            ? '#0000ff'
            : color1
        }
      />
    </mesh>
  )
}

const RightArrow = ({ position, nodes, color1, ...props }) => {
  const a11y = useA11y()

  return (
    <mesh
      geometry={nodes.shape_triangle_flat_2002.geometry}
      material={nodes.shape_triangle_flat_2002.material}
      position={position}
      rotation={[0, -1.54, Math.PI / 2]}
      scale={0.91}
    >
      <meshStandardMaterial
        roughness={0.2}
        metalness={1}
        flatShading={false}
        emissive={a11y.focus || a11y.hover ? '#0000ff' : color1}
      />
    </mesh>
  )
}

const Pokeball = ({ rotationY, selectedOption, nodes, materials, color1, ...props }) => {

  const group = useRef();

  useFrame((state, delta) => {
    const curRotationY = THREE.MathUtils.lerp(
      group.current.rotation.y,
      rotationY,
      0.05
    );
    group.current.rotation.y =
    curRotationY + Math.cos(state.clock.elapsedTime) / 40;
    group.current.position.y = 0.35 - Math.sin(state.clock.elapsedTime) / 10;
  });
  
  return (
    <group ref={group}>
    <mesh
    geometry={nodes.hinge_pokeball_top.geometry}
    material={nodes.hinge_pokeball_top.material}
    position={[0, 0, 2.29]}
  >
    <mesh
      geometry={nodes.button_pokeball.geometry}
      material={nodes.button_pokeball.material}
      position={[0, 0, -2.29]}
      rotation={[0, 0, -Math.PI / 4]}
    >
      <meshStandardMaterial
        roughness={0.9}
        metalness={0.2}
        flatShading={false}
      />
    </mesh>
    <group position={[0, 0, -2.29]}>
      <mesh
        geometry={nodes.Sphere020.geometry}
        material={nodes.Sphere020.material}
      />
      <mesh
        geometry={nodes.Sphere020_1.geometry}
        material={nodes.Sphere020_1.material}
      />
    </group>
    <group position={[0, 0, -2.29]}>
      <mesh
        geometry={nodes.Sphere005.geometry}
        material={nodes.Sphere005.material}
      />
      <mesh
        geometry={nodes.Sphere005_1.geometry}
        material={nodes.Sphere005_1.material}
      />
      <mesh
        geometry={nodes.Sphere005_2.geometry}
        material={materials.Material}
      />
    </group>
    <mesh
      geometry={nodes.ring_button_pokeball.geometry}
      material={materials['Material.006']}
      position={[0, 0, -2.29]}
    >
      <meshStandardMaterial
        roughness={0.2}
        metalness={0}
        flatShading={false}
        emissive={color1}
        color={color1}
      />
    </mesh>
    <mesh
      geometry={nodes.top_pokeball.geometry}
      material={materials['Material.002']}
      position={[0, 0, -2.29]}
    >
      <meshStandardMaterial
        roughness={0.3}
        metalness={0.8}
        flatShading={false}
        emissive={color1}
        color={'#cccccc'}
      />
    </mesh>
  </mesh>
  <mesh
    geometry={nodes.bottom_pokeball.geometry}
    material={materials['Material.003']}
    rotation={[0, 0, Math.PI]}
  >
    <meshStandardMaterial
      roughness={0.9}
      metalness={0.2}
      flatShading={false}
    />
  </mesh>
  <mesh
        visible={selectedOption === 'small'}
        geometry={nodes.shape_plate_bevel_1001.geometry}
        material={nodes.shape_plate_bevel_1001.material}
        rotation={[0.63, 0.39, -2.66]}
      >
        <meshStandardMaterial
          roughness={0.2}
          metalness={0}
          flatShading={false}
          emissive={color1}
          color={color1}
        />
      </mesh>
      <mesh
        visible={selectedOption === 'medium'}
        geometry={nodes.shape_plate_bevel_2001.geometry}
        material={nodes.shape_plate_bevel_2001.material}
        rotation={[0.63, 0.39, -2.66]}
      >
        <meshStandardMaterial
          roughness={0.2}
          metalness={0}
          flatShading={false}
          emissive={color1}
          color={color1}
        />
      </mesh>
      <mesh
        visible={selectedOption === 'large'}
        geometry={nodes.shape_plate_bevel_3001.geometry}
        material={nodes.shape_plate_bevel_3001.material}
        rotation={[0.63, 0.39, -2.66]}
      >
        <meshStandardMaterial
          roughness={0.2}
          metalness={0}
          flatShading={false}
          emissive={color1}
          color={color1}
        />
      </mesh>
      <mesh
        visible={selectedOption === 'small'}
        geometry={nodes.shape_plate_bevel_1002.geometry}
        material={nodes.shape_plate_bevel_1002.material}
        rotation={[0.63, -0.39, 2.66]}
      >
        <meshStandardMaterial
          roughness={0.2}
          metalness={0}
          flatShading={false}
          emissive={color1}
          color={color1}
        />
      </mesh>
      <mesh
        visible={selectedOption === 'medium'}
        geometry={nodes.shape_plate_bevel_2002.geometry}
        material={nodes.shape_plate_bevel_2002.material}
        rotation={[0.63, -0.39, 2.66]}
      >
        <meshStandardMaterial
          roughness={0.2}
          metalness={0}
          flatShading={false}
          emissive={color1}
          color={color1}
        />
      </mesh>
      <mesh
        visible={selectedOption === 'large'}
        geometry={nodes.shape_plate_bevel_3002.geometry}
        material={nodes.shape_plate_bevel_3002.material}
        rotation={[0.63, -0.39, 2.66]}
      >
        <meshStandardMaterial
          roughness={0.2}
          metalness={0}
          flatShading={false}
          emissive={color1}
          color={color1}
        />
      </mesh>
  </group>
  )
}

export default function Model({ color1, color2, ...props }) {
  const group = useRef()
  const { nodes, materials } = useGLTF('/pokedemo.glb')

  const [rotationY, setRotationY] = useState(0)
  const [selectedOption, setSelectedOption] = useState('large')

  

  return (
    <group ref={group} {...props} dispose={null}>
      <group position={[2, 0.5, 0]} >
      <A11yTag tag="form">
      <A11yTag tag="fieldset">
      <A11y role='content' description='STARTER SELECTION' tag={'p'} parentTag={'legend'}>
      <Text
      position={[-0.03, 4.33, 0.9]}
      rotation={[0, Math.PI, 0]}
      outlineOpacity={1}
      color={color1}
      fontSize={0.5}
      font='https://fonts.gstatic.com/s/raleway/v14/1Ptrg8zYS_SKggPNwK4vaqI.woff'
      anchorX='center'
      anchorY='middle'
    >
      Select option
    </Text>
        </A11y>
        <A11y
          role='input'
          debug={false}
          description="Large"
          a11yElAttr={{
            type: "radio",
            name: "sizeoption",
            value: "large",
            checked: selectedOption === "large",
          }}
          actionCall={() => {
            console.log('large')
              setSelectedOption('large')
          }}
        >
          <LargeOption
            position={[-3.03, 4.33, 0.9]}
            nodes={nodes}
            color1={color1}
          />
        </A11y>
        <A11y
          role='input'
          debug={false}
          description="Medium"
          a11yElAttr={{
            type: "radio",
            name: "sizeoption",
            value: "medium",
            checked: selectedOption === "medium",
          }}
          a11yElStyle={
            {
              width:"25px",
              height:"25px"
            }
          }
          actionCall={() => {
            console.log('medium')
              setSelectedOption('medium')
          }}
        >
          <MediumOption
            position={[-4.03, 4.33, 0.9]}
            nodes={nodes}
            color1={color1}
          />
        </A11y>
        <A11y
          role='input'
          debug={false}
          description="Small"
          a11yElAttr={{
            type: "radio",
            name: "sizeoption",
            value: "small",
            checked: selectedOption === "small",
          }}
          a11yElStyle={
            {
              width:"10px",
              height:"10px"
            }
          }
          actionCall={() => {
            console.log('small')
              setSelectedOption('small')
          }}
        >
          <SmallOption
            position={ [-4.73, 4.33, 0.9]}
            nodes={nodes}
            color1={color1}
          />
        </A11y>
      </A11yTag>
      </A11yTag>

        </group>

      <Pokeball rotationY={rotationY} selectedOption={selectedOption} nodes={nodes} color1={color1} materials={materials}/>
      
      <A11y role='button' description='rotate left' 
        actionCall={()=>{
          setRotationY(rotationY-Math.PI/4)
        }}
      >
        <RightArrow position={[3.44, 0, -0.62]} nodes={nodes} color1={color1} />
      </A11y>

      <mesh
        geometry={nodes.shape_triangle_flat_3002.geometry}
        material={nodes.shape_triangle_flat_3002.material}
        position={[3.44, 0, -0.48]}
        rotation={[0, -1.54, Math.PI / 2]}
        scale={0.91}
      >
        <meshStandardMaterial
          roughness={0.2}
          metalness={0}
          flatShading={false}
          emissive={color1}
          color={color1}
        />
      </mesh>
      <A11y role='button' description='rotate right'
        actionCall={()=>{
          setRotationY(rotationY+Math.PI/4)
        }}
      >
        <LeftArrow position={[-3.51, 0, -0.62]} nodes={nodes} color1={color1} />
      </A11y>
      <mesh
        geometry={nodes.shape_triangle_flat_3001.geometry}
        material={nodes.shape_triangle_flat_3001.material}
        position={[-3.51, 0, -0.48]}
        rotation={[0, 1.54, -1.57]}
        scale={0.91}
      >
        <meshStandardMaterial
          roughness={0.2}
          metalness={0}
          flatShading={false}
          emissive={color1}
          color={color1}
        />
      </mesh>

    

      {/* <mesh
        geometry={nodes.shape_spiral_flat_3001.geometry}
        material={nodes.shape_spiral_flat_3001.material}
        position={[2.69, 4.33, 0.93]}
        rotation={[-1.52, 0, 0]}
      /> */}
    </group>
  )
}

useGLTF.preload('/poke_demo.glb')
